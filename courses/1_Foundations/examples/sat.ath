module SAT {

    declare A,B,C,D: Boolean


    define (cnf p) := (cnf-core p 'sentence-list)

    define (&&* L f) :=
        match L {
            [] => true
            | (list-of h t) => (&& (f h) (&&* t f))
        }
    define (||* L f) :=
        match L {
            [] => false 
            | (list-of h t) => (|| (f h) (||* t f))
        }

    define (V p I) := 
            match p {
                (|| true false) => p
                | (some-atom _) => (I p)
                | (~ q) => (negate (V q I))
                | (and (some-list args)) => (&&* args lambda (q) (V q I))
                | (or (some-list args)) => (||* args lambda (q) (V q I))
                | (q ==> r) => (|| (V (~ q) I) (V r I))
                | (q <==> r) => (|| (V (q & r) I) (V (~ q & ~ r) I))
            }


    define wrt := V
    set-precedence wrt 5


    define (all-interpretations atoms) :=
        match atoms {
            [] => [|{}|]
            | (list-of a t) => let {L := (all-interpretations t)}
                                (join (map lambda (I) (Map.add I [[a true]]) L) 
                                      (map lambda (I) (Map.add I [[a false]]) L) 
                                )
        }


    define (taut? p) :=
        (for-each (all-interpretations (atoms p)) lambda (I) (V p I))
    set-precedence taut? 5

   # define (sat? p) := (negate taut? (~ p))

    define (sat? p) :=
        (find-element 
            (all-interpretations atoms p)
            lambda (I) (V p I)
            lambda (x) x
            lambda () false
        )
    set-precedence sat? 5

    # (sat? A & B)

    declare P: [Int] -> Boolean

    define (if-chain N) :=
        let {
            P_1 := (P 1);
            P_N := (P N);
            conditionals := (map lambda (i) (P i ==> P i plus 1)  (1 to N minus 1));
            antecedent := (& (P_1 added-to conditionals))
        }
        (antecedent ==> P_N)

    define p := (if-chain 3)


    define (choose-lit clauses) := 
        let {counts := (HashTable.table);
                process := lambda (c)
                                (map-proc 
                                    lambda (l)
                                        let {count := try {(HashTable.lookup counts l) | 0}}
                                        (HashTable.add counts [l --> (1 plus count)])
                                    c
                                );
                _ := (map-proc process clauses);
                L := (HashTable.table->list counts)}

            letrec {loop := lambda (pairs lit max)
                                match pairs {
                                    [] => lit
                                    | (list-of [l count] more) => 
                                        check {(count greater? max) => (loop more l count)
                                                | else => (loop more lit max)
                                              }
                                }
                    }
                    (loop L () 0)


    define (unit-propagate l clauses) :=
        let {l' := (complement l)}
            (map-select lambda (c)
                    check {(member? l c) => ()
                            | else => (filter c (unequal-to l'))}
                clauses
                (unequal-to ())
            
            )

    define (unit-propagation clauses I) :=
        let { f := lambda (c)
                      match c {
                          [l] => l
                          | _ => ()
                      }
            }

        (find-some-element 
            clauses (unequal-to ())
            f
            lambda (l)
                let { clauses' := (unit-propagate l clauses)}
                    [true clauses' (l added-to I)]
            lambda ()
                [false clauses I]
        )

    define (in-table? x T) :=
        try { let { _ := (table-lookup T x )} true | false }

    define (pure? T) :=
        lambda (l)
            try {(equal? (table-lookup T l) true) | false}

    define (all-pure-literals clauses) :=
        let {T := (table 1000);
             _ := (map-proc
                        lambda (c)
                            (map-proc
                                lambda (l)
                                    let {l' := (complement l)}
                                    check {(in-table? l' T) =>
                                                (seq (table-add T [l --> false])
                                                     (table-add T [l' --> false])
                                                )
                                            | else => (table-add T [l --> true])

                                          }
                            c)
                  clauses)}
        T

    define (pure-literal clauses I) :=
        let { T := (all-pure-literals clauses);
              clauses' := (filter-out clauses
                                lambda (c)
                                    (for-some c (pure? T))
                          );
                lits := (map first (table->list T));
                pure-lits := (filter lits (pure? T))
            }
        [(negate (null? pure-lits)) clauses' (join pure-lits I)]
        

        

    define (dpll0 clauses I) :=
        match clauses {
            [] => I
            | (_ where (member? [] clauses)) => 'unsat
            | _ => let {[success? clauses' I'] := (unit-propagation clauses I)}
                   check {
                       success? => (dpll0 clauses' I')
                       | else => let{[success? clauses' I'] := (pure-literal clauses I)}
                                  check {
                                      success? => (dpll0 clauses' I')
                                      | else => let {l := (choose-lit clauses)}
                                                match (dpll0 (add [l] clauses) I) {
                                                    (some-list L) => L
                                                    | _ => let {l' := (complement l)}
                                                            (dpll0 (add [l'] clauses) I)
                                                }
                                  }
                       
                    }
        }



    define (dpll clauses) := (dpll0 clauses [])

    define test_p := (A & B | C & D)
    
    
    define (test-dpll p) :=
        let {
            m := (cnf p);
            clause-sentences := (m 'result);
            clauses := (map get-disjuncts clause-sentences)
        }
        (dpll clauses)
    

    # (test-dpll test_p)

}